# %%[markdown]

"""
# Projeto: Dashboard waze - por via

Data: 22 junho 2021

Dataset: Traffic jams: traffic slowdown information generated by the service based on a
user’s location and speed. "Data provided by Waze App. Learn more at Waze.com".

Conteúdo: Leitura do Feed e criar arquivo .csv.

Metodologia da estrutura dos dados: Dados agregados diretamente pelo delay e nome das
vias.

A fazer: Verificar o grupo por nome da via + bairro.
"""

# %%

import datetime
from calendar import monthrange
from enum import unique
import os
import numpy as np
import pandas as pd
import geopandas as gpd
import json
import seaborn as sns
import matplotlib.pyplot as plt

# pd.set_option('display.max_columns', 45)

# %%

# localização dados
dir_atual = os.getcwd()

local_base = '/geo/www/mapas/waze'

local_base_feed = f'{local_base}/resultados'
local_dados_aux = f'{local_base}/dados'
local_saida_dados = f'{local_base}/dados_exportados'
pastas_base_feed = os.listdir(local_base_feed)


# datas
data_hj = datetime.date.today()
hoje = data_hj.strftime('%Y-%m-%d')

now = datetime.datetime.now()

meses_levantamento = [now.strftime('%Y-%m')]
for _ in range(0, 2):
    now = now.replace(day=1) - datetime.timedelta(days=1)
    meses_levantamento.append(now.strftime('%Y-%m'))

dia_inicio = datetime.datetime.strptime(
    meses_levantamento[2] + '-01', '%Y-%m-%d')

data_fim = datetime.datetime.strptime(hoje, '%Y-%m-%d')

lista_dias = pd.date_range(dia_inicio, data_fim -
                           datetime.timedelta(days=1), freq='d')

# %%
# carregar dados pasta feed


def pegar_mes(ano, mes, tipo):
    dias_mes = range(monthrange(ano, mes)[1]+1)[1:]
    dias = []
    for d in dias_mes:
        dias.append(f'{ano}-{mes:02}-{d:02}_{tipo}')

    dados_mes = []
    for f in dias:
        try:
            dados_mes.append(gpd.read_file(
                f'{local_base_feed}/{ano}/{tipo}/{f}.json'))
        except:
            print(f'dia {f} não encontrado')
    return gpd.GeoDataFrame(pd.concat(dados_mes, ignore_index=True),
                            crs=dados_mes[0].crs)

# %%
# levantar dados


levantamento_jams = []

for mes in meses_levantamento:
    dt_mes = pegar_mes(int(mes[0:4]), int(mes[5:7]), 'jams')
    levantamento_jams.append(dt_mes)

gdf = gpd.GeoDataFrame(
    pd.concat(levantamento_jams, ignore_index=True), crs=levantamento_jams[0].crs)

print('união realizada')

# %%

gdf['dtdate'] = gdf['timestamp'].str.slice(0, 10)


# %%
# Progressão vias

df_vias = gdf.groupby(['street', 'dtdate'], as_index=False)['delay'].sum()

# %%

vias_unique = df_vias['street'].dropna().unique().tolist()

# %%

base_vias = pd.DataFrame(vias_unique, columns=['nome'])

for i in lista_dias.tolist():
    data_str = i.strftime("%Y-%m-%d")
    base_vias[data_str] = 0

# %%


def preencher_datas(linha):
    cond_index = base_vias.loc[base_vias['nome']
                               == linha['street']].index.values
    # print(cond_index[0])
    # print(linha['dtdate'])
    base_vias.at[cond_index[0], linha['dtdate']] = linha['delay']


df_vias.dropna().apply(preencher_datas, axis=1)

# %%

base_vias.fillna(0, inplace=True)

base_vias['total'] = base_vias.iloc[:, 1:-1].sum(axis=1)

base_vias.sort_values('total', ignore_index=True,
                      inplace=True, ascending=False)

# %%

# nome_via = 'R. Uruguai'
# valores = base_vias.loc[base_vias['nome'] == nome_via].values.tolist()[0][1:-1]
#
# colunas = base_vias.columns.values.tolist()[1:-1]
#
# sns.set(rc={'figure.figsize': (20, 5)})
# plt.xticks(rotation=90)
# sns.lineplot(x=colunas, y=valores).set_title(f'{nome_via} últimos 3 meses')

# %%
# exportar arquivos webmap
base_vias.to_csv(
    f'{local_saida_dados}/progressao_vias.tsv', sep='\t', index=False)
